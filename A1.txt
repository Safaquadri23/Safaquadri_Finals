TSP
def nn_tsp(dist):
  n=len(dist)
  opt_tour=[]
  opt_cost=float('inf')


  for start in range(n):
    unvisited=set(range(n))
    curr_city=start
    tour=[curr_city]
    total_dist=0
    unvisited.remove(start)


    while unvisited:
      nearest_city=min(unvisited,key=lambda city:dist[curr_city][city])


      total_dist+=dist[curr_city][nearest_city]
      tour.append(nearest_city)
      unvisited.remove(nearest_city)
      curr_city=nearest_city


      total_dist+=dist[curr_city][start]
      tour.append(start)


      if total_dist<opt_cost:
        opt_cost=total_dist
        opt_tour=tour


        print(f"pathb starting from city{start}:{tour},cost:{total_dist}")


        print("optimal tour:",opt_tour)
        print("optimal cost:",opt_cost)


if __name_==’__main__’:
  num_cities=int(input("enter no of cities:"))
  print("distance matriz:")


  distance=[]


  for _ in range(num_cities):
    row=list(map(int,input().split()))
    distance.append(row)


nn_tsp(distance)


















NQUEEN
def isSafe(mat, r, c):
  for i in range(r):
    if mat[i][c]=='Q':
      return False
  i, j=r, c
  while i>=0 and j>=0:
    if mat[i][j]=='Q':
      return False
    i-=1
    j-=1


  i, j=r, c
  while i>=0 and j< len(mat):
    if mat[i][j]=='Q':
      return False
    i-=1
    j+=1
  return True


def printSolution(mat):
  for r in mat:
    print(' '.join(r))
  print()


def nQueens(mat, r):
  if r==len(mat):
    printSolution(mat)
    return


  for i in range (len(mat)):
    if isSafe(mat, r, i):
      mat[r][i]='Q'
      nQueens(mat, r+1)
      mat[r][i]='-'


if __name__=='__main__':
  N=int(input("Enter no. of Queens(N)"))
  mat=[['-' for x in range(N)]for y in range (N)]
  print("Solution")
  nQueens(mat, 0)




















JUG
def pour(jug1,jug2):
  max1,max2,fill=3,4,2
  print("%d\t%d" %(jug1,jug2))
  if jug2 == fill:
        return
  elif jug2 == max2:
        pour(0, jug1)
  elif jug1 != 0 and jug2 == 0:
        pour(0 , jug1)
  elif jug1 == fill:
        pour(jug1 , 0)
  elif jug1 < max1:
        pour(max1 ,jug2)
  elif jug1 < (max2 - jug2):
        pour(0 , (jug1 + jug2))
  else:
        pour(jug1 - (max2 - jug2) , (max2 - jug2) + jug2)
  print("jug1\tjug2")
pour(0,0)


























































NLTK


!pip install nltk
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from collections import Counter
nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('stopwords')
nltk.download('averaged_perception_tagger')
nltk.download('averaged_perceptron_tagger_eng')
def tokenize_text(text):
   tokens=word_tokenize(text.lower())
   return tokens


def count_word_frequency(tokens):
  word_freq=Counter(tokens)
  return word_freq


def remove_stop_words(tokens):
    stop_words=set(stopwords.words('english'))
    filtered_tokens=[word for word in tokens if word not in stop_words]
    return filtered_tokens


def pos_tagging(tokens):
      tagged_tokens=pos_tag(tokens)
      return tagged_tokens


if _name=="main_":
        text=input("enter a sentence")
        tokens=tokenize_text(text)
        word_freq=count_word_frequency(tokens)
        filtered_tokens=remove_stop_words(tokens)
        tagged_tokens=pos_tag(filtered_tokens)


        print("1.tokens:",tokens)
        print("2.word frequency:",dict(word_freq))
        print("3. filtered tokens:",filtered_tokens)
        print("4. pos tagged tokens:",tagged_tokens)




















TIC TAC TOE 
import math  # To use infinity values for Minimax
# Step 1: Create an empty board (9 positions for 3x3 grid)
board = [' ' for _ in range(9)]
# Step 2: Print the current board
def print_board():
    for i in range(3):
        row = board[i*3 : (i+1)*3]
        print('| ' + ' | '.join(row) + ' |')
# Step 3: Check if a player has won
def is_winner(brd, player):
    win_patterns = [
        [0,1,2], [3,4,5], [6,7,8],  # rows
        [0,3,6], [1,4,7], [2,5,8],  # columns
        [0,4,8], [2,4,6]            # diagonals
    ]
    for pattern in win_patterns:
        if all(brd[i] == player for i in pattern):
            return True
    return False
# Step 4: Check if board is full (draw condition)
def is_full(brd):
    return ' ' not in brd
# Step 5: Get all empty spots on the board
def get_available_moves(brd):
    return [i for i in range(9) if brd[i] == ' ']
# Step 6: Minimax algorithm to choose best move
def minimax(brd, depth, is_maximizing):
    if is_winner(brd, 'O'):
        return 1
    elif is_winner(brd, 'X'):
        return -1
    elif is_full(brd):
        return 0
    if is_maximizing:
        best_score = -math.inf
        for move in get_available_moves(brd):
            brd[move] = 'O'
            score = minimax(brd, depth + 1, False)
            brd[move] = ' '
            best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for move in get_available_moves(brd):
            brd[move] = 'X'
            score = minimax(brd, depth + 1, True)
            brd[move] = ' '
            best_score = min(best_score, score)
        return best_score
# Step 7: AI picks the best move using Minimax
def ai_move():
    best_score = -math.inf
    best_move = None
    for move in get_available_moves(board):
        board[move] = 'O'
        score = minimax(board, 0, False)
        board[move] = ' '
        if score > best_score:
            best_score = score
            best_move = move
    board[best_move] = 'O'
# Step 8: Main game loop
def play_game():
    print("Welcome to Tic Tac Toe!")
    print("You are X. AI is O.")
    print_board()
    while True:
        # Player move
        try:
            move = int(input("Enter your move (1-9): ")) - 1
        except ValueError:
            print("Please enter a number between 1 and 9.")
            continue
        if move < 0 or move >= 9 or board[move] != ' ':
            print("Invalid move. Try again.")
            continue
        board[move] = 'X'
        print_board()
        # Check if player wins
        if is_winner(board, 'X'):
            print("You win! 🎉")
            break
        elif is_full(board):
            print("It's a draw!")
            break
        # AI move
        print("AI is thinking...")
        ai_move()
        print_board()
        # Check if AI wins
        if is_winner(board, 'O'):
            print("AI wins! 🤖")
            break
        elif is_full(board):
            print("It's a draw!")
            break
# Step 9: Run the game
if __name__ == '__main__':
    play_game()


—-----------






NLTK
 !pip install nltk
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from collections import Counter
nltk.download('averaged_perceptron_tagger_eng')
# Download required NLTK resources (only once)
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt_tab')
# Function for tokenization
def tokenize_text(text):
    tokens = word_tokenize(text.lower())  # Convert to lowercase and tokenize
    return tokens
# Function to count word frequency
def count_word_frequency(tokens):
    word_freq = Counter(tokens)  # Use Counter to count word occurrences
    return word_freq
# Function to remove stop words
def remove_stop_words(tokens):
    stop_words = set(stopwords.words('english'))
    filtered_tokens = [word for word in tokens if word not in stop_words]
    return filtered_tokens
# Function for POS tagging
def pos_tagging(tokens):
    tagged_tokens = pos_tag(tokens)  # Use NLTK's POS tagger
    return tagged_tokens
# Main Program
if __name__ == '__main__':
    text = input("Enter a sentence: ")
    # Step 1: Tokenization
    tokens = tokenize_text(text)
    # Step 2: Word Frequency Count
    word_freq = count_word_frequency(tokens)
    # Step 3: Remove Stop Words
    filtered_tokens = remove_stop_words(tokens)
    # Step 4: POS Tagging
    tagged_tokens = pos_tagging(filtered_tokens)
    # Output results
    print("\n--- NLP Analysis ---")
    print("1. Tokens:", tokens)
    print("2. Word Frequency:", dict(word_freq))
    print("3. Filtered Tokens (no stop words):", filtered_tokens)
    print("4. POS Tagged Tokens:", tagged_tokens)